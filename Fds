import pandas as pd
import re
import glob
import os

########################################
# 1. FOLDER WHERE YOUR 5 EXCELS LIVE
########################################

# CHANGE THIS to your folder path
folder_path = r"C:\Users\Nishi\Documents\E"

# Pick all .xlsx files in that folder
excel_files = glob.glob(os.path.join(folder_path, "*.xlsx"))

print("These files will be processed:")
for f in excel_files:
    print(" -", f)

########################################
# 2. READ AND COMBINE ALL FILES
########################################

df_list = []
for fpath in excel_files:
    temp = pd.read_excel(fpath)

    # If your columns are not exactly MSG_DATE / T_MESSAGE,
    # fix them here once so rest of code works.
    # Example:
    # temp = temp.rename(columns={"MSG_DATE.": "MSG_DATE", "T_MESSAGE.": "T_MESSAGE"})

    # OPTIONAL: keep source filename for traceability
    temp["SOURCE_FILE"] = os.path.basename(fpath)

    df_list.append(temp)

# Merge all partial pulls into one dataframe
DF_ALL = pd.concat(df_list, ignore_index=True)

########################################
# 3. CLEAN DATE COLUMN
########################################

# Make sure MSG_DATE is proper datetime so we can sort by it
DF_ALL["MSG_DATE"] = pd.to_datetime(DF_ALL["MSG_DATE"], errors="coerce")

########################################
# 4. KEYWORD EXTRACTOR (same logic as before)
########################################

def extract_valid_keywords(message_text):
    """
    Return list of cleaned keywords inside [...] from one T_MESSAGE,
    skipping those whose cleaned version ends with 'X'.
    """
    if pd.isna(message_text):
        return []

    # Get everything between square brackets [...]
    raw_keywords = re.findall(r'\[([^\]]+)\]', str(message_text))

    cleaned_keywords = []
    for kw in raw_keywords:
        k = kw.strip()

        # collapse multiple spaces/newlines/tabs to a single space
        k = re.sub(r'\s+', ' ', k)

        # remove any trailing '|' characters at end (like 'BUSINESS X|')
        k = re.sub(r'[|]+$', '', k).strip()

        # rule: skip if keyword ends with 'X'
        if k.endswith('X'):
            continue

        cleaned_keywords.append(k)

    return cleaned_keywords

########################################
# 5. FIND FIRST OCCURRENCE DATE PER KEYWORD
########################################

first_seen = {}  # dict: { "KEYWORD": first_datetime_we_saw_it }

# Sort by time first so earliest rows are processed first
DF_ALL_sorted = DF_ALL.sort_values("MSG_DATE", ascending=True)

for _, row in DF_ALL_sorted.iterrows():
    msg_date = row["MSG_DATE"]
    msg_text = row["T_MESSAGE"]

    for kw in extract_valid_keywords(msg_text):
        if kw not in first_seen:
            first_seen[kw] = msg_date

########################################
# 6. BUILD FINAL SUMMARY DATAFRAME
########################################

summary_df = (
    pd.DataFrame(
        [{"KEYWORD": k, "FIRST_OCCURRENCE_DATE": v} for k, v in first_seen.items()]
    )
    .sort_values(["FIRST_OCCURRENCE_DATE", "KEYWORD"])
    .reset_index(drop=True)
)

print("Final summary (first 10 rows):")
print(summary_df.head(10))

########################################
# 7. EXPORT RESULT TO EXCEL
########################################

output_path = os.path.join(folder_path, "final_keyword_first_occurrence.xlsx")
summary_df.to_excel(output_path, index=False)

print("Saved final result to:", output_path)

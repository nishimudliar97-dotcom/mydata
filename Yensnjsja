from sys import path, exit
path.append(r"\\LNDMS00N28013166\DataScienceLive")

# Core dispatcher functions.
from DSS_Dispatcher import DSdispatcherQueryRAW, DSSGetTemplate, DSSWriteExcel, DSSEmail
# Core reporting functions.
from DSS_LIB import DSSExcelAddDataset, DSunicodeomap

# Common packages used by DSS.
from os.path import exists
import numpy as np
import pandas as pd
import re

# -----------------------------
# 1. Your SQL query
# -----------------------------
p = """
Select TRUNC(TO_DATE(T_FILTERED, 'YYYY/MM/DD HH24:MI:SS')) AS msg_date,
       T_MESSAGE
from SANCTIONS.OWNER.FOFA_MIST_MESSAGE
WHERE TRUNC(TO_DATE(T_FILTERED,'YYYY/MM/DD HH24:MI:SS'))
      BETWEEN DATE '2025-08-01' AND DATE '2025-08-02'
FETCH FIRST 3 ROWS ONLY;
"""

print("Running initial Query")

DSdispatcher = DSdispatcherQueryRAW(service='ORACLE',
                                    connection='CONTINUITY',
                                    query=p)

# -----------------------------
# 2. Put query result into df
# -----------------------------
if DSdispatcher["RESULT"] == True:
    print("Query OK")

    raw_data = DSdispatcher["DATASET"]        # rows from Oracle
    df = pd.DataFrame(raw_data)               # make dataframe

    # Optional unicode normalisation if required in your environment
    # df = DSunicodeomap(df)

    print(df.head())

    # Also save the raw query result to Excel if you want
    df.to_excel(r"C:\Users\yourname\Documents\raw_result.xlsx", index=False)

else:
    print("Query Failure")
    exit(0)

# -----------------------------
# 3. Build the date / keyword table
#    Rule: take [ ... ] groups from T_MESSAGE
#    keep ONLY ones that do NOT end with 'X'
# -----------------------------

def get_non_x_keywords(text):
    # find all substrings inside square brackets []
    parts = re.findall(r'\[([^\]]+)\]', str(text))

    # keep only entries that DON'T end with X
    cleaned = [p.strip() for p in parts if not p.strip().endswith('X')]
    return cleaned

# create a column with list of "bad" keywords per row
df["bad_keywords_list"] = df["T_MESSAGE"].apply(get_non_x_keywords)

# explode so each keyword becomes its own row with the same MSG_DATE
out = df.explode("bad_keywords_list", ignore_index=True)

# filter out blanks / NaN (rows where no bad keyword found)
out = out[
    out["bad_keywords_list"].notna() &
    (out["bad_keywords_list"] != "")
]

# final tidy columns
out = out[["MSG_DATE", "bad_keywords_list"]].rename(
    columns={
        "MSG_DATE": "msg_date",
        "bad_keywords_list": "keyword"
    }
)

print("Suspicious keywords by date:")
print(out)

# -----------------------------
# 4. Save this result to Excel
# -----------------------------
out_path = r"C:\Users\yourname\Documents\keywords_by_date.xlsx"
out.to_excel(out_path, index=False)
print("Written:", out_path)
